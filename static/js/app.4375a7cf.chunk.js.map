{"version":3,"sources":["src/Utils/AsyncStorageUtils.ts","src/DAL/Api.ts","src/BLL/NavigateParamsSlice.ts","src/BLL/Store.ts","src/common/Variables.ts","src/common/Styles.ts","src/common/CustomButton.tsx","src/styled-components/StyledInput.tsx","src/CustomHooks/CustomHooks.ts","src/View/Login.tsx","src/View/TaskView.tsx","src/View/Todo.tsx","src/View/Task.tsx","src/View/Tasks.tsx","src/View/TodoContainer.tsx","src/View/TaskList.tsx","src/screens/TaskScreen/TaskScreen.tsx","src/View/Header.tsx","src/View/EmptyContent.tsx","src/View/ViewModContainer.tsx","src/View/TodoList.tsx","src/screens/Todo-Screen/TodoScreen.tsx","src/screens/Root-screen/RootScreen.tsx","App.tsx"],"names":["saveStorage","key","value","a","jsonValue","JSON","stringify","AsyncStorage","setItem","console","log","loadStorage","getItem","parse","Api","createApi","reducerPath","tagTypes","baseQuery","baseUrl","withCredentials","headers","url","method","data","params","cookie","axios","result","join","AxiosError","err","error","status","response","message","axiosQuery","endpoints","build","authMe","query","providesTags","login","mutation","payload","invalidatesTags","logout","body","getTodoList","postTodo","title","putTodo","todoId","deleteTodo","getTasks","todolistId","page","count","postTask","putTask","task","todoListId","_id","deleteTask","taskId","navigateParamsSlice","createSlice","name","initialState","currentTodo","currentTask","reducers","changeCurrentTodo","state","action","changeCurrentTask","store","configureStore","reducer","navigateParamsState","middleware","getDefaultMiddleware","concat","Dimensions","get","HEIGHT","height","WIDTH","width","commonBorderStyle","borderRadius","borderStyle","borderColor","borderWidth","commonStyles","StyleSheet","create","modalInputStyle","PADDING","paddingHorizontal","fontSize","color","CustomButton","memo","props","children","onPress","styleButton","styleTitle","activeOpacity","underlayColor","disabled","onPressHandler","useCallback","event","TouchableHighlight","style","styles","button","Text","minWidth","flexWrap","justifyContent","alignItems","StyledInput","styled","TextInput","useAppDispatch","useDispatch","useAppSelector","useSelector","useAppNavigation","useNavigation","allActions","actions","useActions","dispatch","bindActionCreators","Login","useAuthMeQuery","isLoading","isError","useLoginMutation","navigation","useEffect","resultCode","navigate","screen","onSubmit","values","View","loginContainer","ActivityIndicator","size","initialValues","email","password","handleChange","handleBlur","handleSubmit","loginForm","onChangeText","onBlur","loginTextField","flex","paddingVertical","backgroundColor","marginVertical","MARGIN","TaskView","container","taskBar","checkedTask","paddingTop","StatusBar","currentHeight","flexDirection","Todo","addTaskHandler","todo","viewMod","onChangeTaskTitle","currentTaskTitle","deleteTodoHandler","onAddTask","onDeleteTodo","titleContainer","inputAndButtonBox","input","placeholderTextColor","placeholder","caretHidden","alignSelf","Task","usePutTaskMutation","doubleTap","tapCount","setTimeout","checkTask","Pressable","taskContainer","maxWidth","maxHeight","Tasks","tasks","FlatList","extraData","keyExtractor","item","renderItem","listKey","TodoContainer","useState","taskTitle","setTaskTitle","useGetTasksQuery","useDeleteTodoMutation","usePostTaskMutation","items","onChangeTodoTitle","TaskList","Tab","createBottomTabNavigator","TaskScreen","Navigator","tabBar","sceneContainerStyle","screenOptions","headerShown","Screen","component","Header","createTodoHandler","inputValue","setInputValue","onTextInput","onCreateTodo","EmptyContent","ViewModContainer","todoContainer","minHeight","TodoList","useGetTodoListQuery","todoList","usePostTodoMutation","createTodo","newTodoTitle","render","TouchableOpacity","onLongPress","ListHeaderComponent","ListEmptyComponent","TodoScreen","RootScreen","App","NavigationContainer"],"mappings":"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","file":"static/js/app.4375a7cf.chunk.js","sourcesContent":["import AsyncStorage from '@react-native-async-storage/async-storage';\r\n\r\nexport const saveStorage = async (key:string,value:unknown) => {\r\n    try {\r\n        const jsonValue = JSON.stringify(value)\r\n        await AsyncStorage.setItem(key,jsonValue);\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n};\r\n\r\nexport const loadStorage = async (key:string) => {\r\n    try {\r\n        const jsonValue = await AsyncStorage.getItem(key);\r\n        return jsonValue != null ? JSON.parse(jsonValue) : null;\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n};","import {BaseQueryFn, createApi} from \"@reduxjs/toolkit/dist/query/react\";\r\nimport {AuthDataType, Data, GetTaskType, Item, LoginPayloadType, TaskItem, TodoListItem} from \"./types/types\";\r\nimport axios, {AxiosError, AxiosRequestConfig} from \"axios\";\r\nimport {loadStorage, saveStorage} from \"../Utils/AsyncStorageUtils\";\r\n\r\nconst axiosQuery = (\r\n    {baseUrl, withCredentials, headers}:\r\n        {\r\n            baseUrl: string,\r\n            withCredentials?: boolean,\r\n            headers?: AxiosRequestConfig[\"headers\"]\r\n        } = {baseUrl: ''}\r\n): BaseQueryFn<{\r\n    url: string\r\n    method: AxiosRequestConfig['method']\r\n    data?: AxiosRequestConfig['data']\r\n    params?: AxiosRequestConfig['params']\r\n},\r\n    unknown,\r\n    unknown> =>\r\n    async ({url, method, data, params}) => {\r\n        // из-за того что бек расчитан под работу только с вэб приложениями, приходится имитировать браузерные запросы\r\n        //прокидывая браузерные куки с каждым запросом\r\n        const cookie = await loadStorage(\"Cookie\")\r\n        if (cookie) {\r\n            headers = {\r\n                ...headers,\r\n                \"cookie\": `_ym_d=1649395568; _ym_uid=1649395568426605962; ASP.NET_SessionId=opdrxfnafx0gj2g1ulp5mzs3; _ym_isad=2; ${cookie}`\r\n            }\r\n        }\r\n        try {\r\n            console.log(headers)\r\n            const result = await axios({url: baseUrl + url, method, data, params, headers, withCredentials})\r\n            console.log(result)\r\n            if (result.headers[\"set-cookie\"]) {\r\n                saveStorage(\"Cookie\", result.headers[\"set-cookie\"]?.join(\"\"))\r\n            }\r\n            return {data: result.data}\r\n        } catch (axiosError) {\r\n            if (axiosError instanceof AxiosError) {\r\n                let err = axiosError as AxiosError\r\n                console.log(err)\r\n                return {\r\n                    error: {\r\n                        status: err.response?.status,\r\n                        data: err.response?.data || err.message,\r\n                    },\r\n                }\r\n            } else {\r\n                throw axiosError\r\n            }\r\n        }\r\n    }\r\n\r\n\r\nexport const Api = createApi({\r\n    reducerPath: \"Api\",\r\n    tagTypes: [\"login\", \"logout\", \"postTodo\", \"deleteTodo\", \"putTodo\", \"postTask\", \"putTask\", \"deleteTask\"],\r\n    baseQuery: axiosQuery(\r\n        {\r\n            baseUrl: `https://mini-trello-backend.herokuapp.com`,\r\n                // 'https://social-network.samuraijs.com/api/1.1/',\r\n            headers: {\r\n                \"API-KEY\": \"1fb0efe7-1c1f-46ce-bb74-74ed02f7875f\"\r\n            },\r\n            withCredentials: true\r\n        }\r\n    ),\r\n    endpoints: ((build) => ({\r\n        authMe: build.query<Data<AuthDataType>, void>({\r\n            query: () => ({url: `/auth/me`, method: \"get\"}),\r\n            providesTags: () => [\"login\", \"logout\"]\r\n        }),\r\n        login: build.mutation<Data<{ userId: string }>, LoginPayloadType>({\r\n            query: (payload) => ({url: `/auth/login`, method: \"POST\", data: payload}),\r\n            invalidatesTags: [\"login\"]\r\n        }),\r\n        logout: build.mutation<Data<{}>, void>({\r\n            query: (payload) => ({url: `/auth/login`, method: \"DELETE\", body: payload}),\r\n            invalidatesTags: [\"logout\"]\r\n        }),\r\n\r\n        getTodoList: build.query<TodoListItem[], void>({\r\n            query: () => ({url: `/todo-lists`, method: \"get\"}),\r\n            providesTags: () => [\"postTodo\", \"putTodo\", \"deleteTodo\"]\r\n        }),\r\n        postTodo: build.mutation<Data<Item<TodoListItem>>, string>({\r\n            query: (title: string = \"New todo\") => ({url: `/todo-lists`, method: `post`, data: {title}}),\r\n            invalidatesTags: [\"postTodo\"]\r\n        }),\r\n        putTodo: build.mutation<Data<{}>, { title: string, todoId: string }>({\r\n            query: (payload) => ({url: `/todo-lists/${payload.todoId}`, method: `put`, data: {title: payload.title}}),\r\n            invalidatesTags: [\"putTodo\"]\r\n        }),\r\n        deleteTodo: build.mutation<Data<{}>, string>({\r\n            query: (todoId) => ({url: `/todo-lists/${todoId}`, method: \"delete\"}),\r\n            invalidatesTags: [\"deleteTodo\"]\r\n        }),\r\n\r\n        getTasks: build.query<GetTaskType, { todolistId: string, count?: number, page?: number }>({\r\n            query: ({todolistId, page = 1, count = 100}) => ({\r\n                url: `/todo-lists/${todolistId}/tasks`,\r\n                method: \"get\",\r\n                params: {count, page}\r\n            }),\r\n            providesTags: () => [\"postTask\", \"putTask\", \"deleteTask\"]\r\n        }),\r\n\r\n        postTask: build.mutation<Data<Item<TaskItem>>, { todolistId: string, title: string }>({\r\n            query: ({todolistId, title}) => {\r\n                return {url: `/todo-lists/${todolistId}/tasks`, method: \"post\", data: {title}}\r\n            },\r\n            invalidatesTags: [\"postTask\"]\r\n        }),\r\n\r\n        putTask: build.mutation<Data<Item<TaskItem>>, TaskItem>({\r\n            query: (task) => ({url: `/todo-lists/${task.todoListId}/tasks/${task._id}`, method: \"put\", data: task}),\r\n            invalidatesTags: [\"putTask\"]\r\n        }),\r\n        deleteTask: build.mutation<Data<{}>, { todolistId: string, taskId: string }>({\r\n            query: ({todolistId, taskId}) => ({url: `/todo-lists/${todolistId}/tasks/${taskId}`, method: \"delete\"}),\r\n            invalidatesTags: [\"deleteTask\"]\r\n        })\r\n\r\n    }))\r\n})\r\n\r\n","import {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {TaskItem, TodoListItem} from \"../DAL/types/types\";\r\n\r\n\r\nexport const navigateParamsSlice=createSlice({\r\n    name:\"navigateParamsSlice\",\r\n    initialState:{\r\n        currentTodo:{} as  TodoListItem,\r\n        currentTask:{} as TaskItem\r\n    },\r\n    reducers:{\r\n        changeCurrentTodo:(state,action:PayloadAction<TodoListItem>)=>{\r\n            state.currentTodo=action.payload\r\n        },\r\n        changeCurrentTask:(state,action:PayloadAction<TaskItem>)=>{\r\n            state.currentTask=action.payload\r\n        }\r\n    }\r\n})","import {configureStore} from \"@reduxjs/toolkit\";\r\nimport {Api} from \"../DAL/Api\";\r\nimport {navigateParamsSlice} from \"./NavigateParamsSlice\";\r\n\r\nexport const store=configureStore({\r\n    reducer:{\r\n        navigateParamsState:navigateParamsSlice.reducer,\r\n        [Api.reducerPath]:Api.reducer\r\n    },\r\n    middleware:getDefaultMiddleware =>\r\n        getDefaultMiddleware().concat(Api.middleware)\r\n})\r\n\r\nexport type AppRootStateType =ReturnType<typeof store.getState>\r\nexport type AppDispatchType=typeof store.dispatch","import {Dimensions} from \"react-native\";\r\nexport const {height:HEIGHT,width:WIDTH}=Dimensions.get(\"screen\")\r\nexport const PADDING = 30\r\nexport const MARGIN=30\r\nexport const FONTSIZEPrimary=22\r\nexport const FONTSIZESecondary=15\r\nexport const TEXTCOLOR=\"#DDDDDD\"\r\nexport const BACKGROUNDCOLOR=\"rgba(5,5,5,0.2)\"\r\n\r\n","import {StyleProp, StyleSheet, TextStyle} from \"react-native\";\r\nimport {FONTSIZEPrimary, HEIGHT, PADDING, TEXTCOLOR, WIDTH} from \"./Variables\";\r\n\r\nexport const commonBorderStyle=(borderRadius:number=10):StyleProp<TextStyle>=>({\r\n    borderStyle: \"solid\",\r\n    borderColor: \"#DDDDDD\",\r\n    borderRadius: borderRadius,\r\n    borderWidth: 1\r\n})\r\n\r\nexport const commonStyles=StyleSheet.create({\r\n    modalInputStyle:{\r\n        height:(HEIGHT-PADDING*2)/19,\r\n        width:(WIDTH-PADDING*2)/2,\r\n        paddingHorizontal:10,\r\n        fontSize:FONTSIZEPrimary,\r\n        color:TEXTCOLOR,\r\n\r\n    }\r\n})","import {ColorValue, GestureResponderEvent, StyleSheet, Text, TouchableHighlight, View} from \"react-native\";\r\nimport {FC, memo, ReactElement, useCallback} from \"react\";\r\nimport {BACKGROUNDCOLOR, FONTSIZEPrimary, PADDING, TEXTCOLOR, WIDTH} from \"./Variables\";\r\nimport {commonBorderStyle} from \"./Styles\";\r\nimport React from \"react\";\r\ntype CustomButtonPropsType = {\r\n    onPress?: (event: GestureResponderEvent) => void\r\n    title?: string\r\n    styleButton?: Object\r\n    styleTitle?: Object\r\n    activeOpacity?: number\r\n    underlayColor?: ColorValue\r\n    children?: ReactElement|string\r\n    disabled?:boolean\r\n}\r\nexport const CustomButton: FC<CustomButtonPropsType> = memo((props) => {\r\n    const {children, onPress, title = \"Button\", styleButton, styleTitle, activeOpacity, underlayColor,disabled} = props\r\n\r\n    const onPressHandler = useCallback( (event: GestureResponderEvent) => {\r\n        onPress && onPress(event)\r\n    },[onPress])\r\n\r\n    return (\r\n        <TouchableHighlight\r\n            onPress={onPressHandler}\r\n            disabled={disabled}\r\n            activeOpacity={!!activeOpacity ? activeOpacity : 0.2}\r\n            style={[styles.button, commonBorderStyle(), styleButton]}\r\n            underlayColor={!!underlayColor ? underlayColor : BACKGROUNDCOLOR}\r\n        >\r\n            <Text style={[styles.title, styleTitle]}>\r\n                {children || title}\r\n            </Text>\r\n        </TouchableHighlight>\r\n    )\r\n})\r\nconst styles = StyleSheet.create({\r\n    button: {\r\n        minWidth: (WIDTH - PADDING * 2) / 7,\r\n        flexWrap:\"nowrap\",\r\n        paddingHorizontal: 5,\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n\r\n    },\r\n    title: {\r\n        color: TEXTCOLOR,\r\n        fontSize: FONTSIZEPrimary\r\n    }\r\n})","import React from \"react\";\r\nimport styled from 'styled-components'\r\nimport {FONTSIZEPrimary, TEXTCOLOR,} from \"../common/Variables\";\r\nimport {TextInput} from \"react-native\";\r\n\r\nexport const StyledInput = styled(TextInput)`\r\n  padding: 0 10px 0 10px;\r\n  font-size: ${FONTSIZEPrimary}px;\r\n  color: ${TEXTCOLOR};\r\n  border-style: solid;\r\n  border-color: ${TEXTCOLOR};\r\n  border-radius: 10px;\r\n  border-width: 1px;\r\n`","import {TypedUseSelectorHook, useDispatch, useSelector} from \"react-redux\";\r\nimport {AppDispatchType, AppRootStateType} from \"../BLL/Store\";\r\nimport {useNavigation} from \"@react-navigation/native\";\r\nimport {useNavigationType} from \"../screens/types/types\";\r\nimport {bindActionCreators} from \"@reduxjs/toolkit\";\r\nimport {navigateParamsSlice} from \"../BLL/NavigateParamsSlice\";\r\n\r\nexport const useAppDispatch: () => AppDispatchType = useDispatch\r\nexport const useAppSelector: TypedUseSelectorHook<AppRootStateType> = useSelector\r\nexport const useAppNavigation = () => useNavigation<useNavigationType>()\r\n\r\nconst allActions = {\r\n    ...navigateParamsSlice.actions\r\n}\r\nexport const useActions = () => {\r\n    const dispatch = useAppDispatch()\r\n    return bindActionCreators(allActions, dispatch)\r\n}","import React, {useEffect} from \"react\";\r\nimport {CustomButton} from \"../common/CustomButton\";\r\nimport {StyleSheet, View, Text, NativeSyntheticEvent, NativeTouchEvent, ActivityIndicator} from \"react-native\";\r\nimport {Formik} from 'formik';\r\nimport {StyledInput} from \"../styled-components/StyledInput\";\r\nimport {MARGIN, PADDING, WIDTH} from \"../common/Variables\";\r\nimport {commonBorderStyle} from \"../common/Styles\";\r\nimport {Api} from \"../DAL/Api\";\r\nimport {useAppNavigation} from \"../CustomHooks/CustomHooks\";\r\n\r\nexport const Login = () => {\r\n    const {data, isLoading, error, isError} = Api.useAuthMeQuery()\r\n    const err = error as {status: number, data:any}\r\n    const [login] = Api.useLoginMutation()\r\n    const navigation = useAppNavigation()\r\n\r\n    useEffect(() => {\r\n        if (data && data.resultCode === 0) {\r\n            navigation.navigate(\"TodoScreen\", {screen: \"TodoList\"})\r\n        }\r\n    }, [data])\r\n\r\n    const onSubmit = async (values: { email: string, password: string }) => {\r\n        try {\r\n            await login(values)\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    }\r\n\r\n    if (isLoading) {\r\n        return (\r\n            <View style={[styles.loginContainer]}>\r\n                <ActivityIndicator size={\"large\"} color={\"rgb(255,255,255)\"}/>\r\n            </View>\r\n        )\r\n    }\r\n\r\n    if (isError) {\r\n        return (\r\n            <View style={[styles.loginContainer]}>\r\n                {\r\n                    error?\r\n                        <Text>{err.data}</Text>:\r\n                        <Text>error</Text>\r\n                }\r\n\r\n            </View>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <View style={[styles.loginContainer]}>\r\n            <Formik\r\n                initialValues={{email: '', password: \"\"}}\r\n                onSubmit={onSubmit}\r\n            >\r\n                {({handleChange, handleBlur, handleSubmit, values}) => (\r\n                    <View style={[styles.loginForm, commonBorderStyle()]}>\r\n                        <StyledInput\r\n\r\n                            onChangeText={handleChange('email')}\r\n                            onBlur={handleBlur('email')}\r\n                            value={values.email}\r\n                        />\r\n                        <StyledInput\r\n                            style={[styles.loginTextField]}\r\n                            onChangeText={handleChange('password')}\r\n                            onBlur={handleBlur('password')}\r\n                            value={values.password}\r\n                        />\r\n\r\n                        <CustomButton\r\n                            onPress={(handleSubmit as unknown) as (ev: NativeSyntheticEvent<NativeTouchEvent>) => void}\r\n                            title=\"Submit\"/>\r\n                    </View>\r\n                )}\r\n            </Formik>\r\n        </View>\r\n    )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    loginContainer: {\r\n        flex: 1,\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n    },\r\n    loginForm: {\r\n        width: (WIDTH - PADDING * 2),\r\n        paddingHorizontal: PADDING,\r\n        paddingVertical: PADDING,\r\n        backgroundColor: \"rgba(5,5,5,0.5)\",\r\n    },\r\n    loginTextField: {\r\n        marginVertical: MARGIN / 3,\r\n    }\r\n})","import {StatusBar, StyleSheet, Text, View} from \"react-native\";\r\nimport {CustomButton} from \"../common/CustomButton\";\r\nimport React from \"react\";\r\nimport {BACKGROUNDCOLOR, FONTSIZEPrimary, PADDING, TEXTCOLOR} from \"../common/Variables\";\r\nimport {useAppSelector} from \"../CustomHooks/CustomHooks\";\r\n\r\nexport const TaskView = () => {\r\n    const task = useAppSelector(state => state.navigateParamsState.currentTask)\r\n\r\n    return (\r\n        <View\r\n            style={[styles.container]}>\r\n            <Text style={[styles.title]}>{task.title}</Text>\r\n            <View style={[styles.taskBar]}>\r\n                <CustomButton>check</CustomButton>\r\n                <CustomButton>delete</CustomButton>\r\n                <CustomButton>edit</CustomButton>\r\n            </View>\r\n        </View>\r\n    )\r\n}\r\nconst styles = StyleSheet.create({\r\n    checkedTask: {\r\n        backgroundColor: BACKGROUNDCOLOR\r\n    },\r\n    container: {\r\n        paddingTop: StatusBar.currentHeight || 0,\r\n        paddingHorizontal: PADDING / 4,\r\n        flex: 1,\r\n        justifyContent: \"space-between\"\r\n    },\r\n    title: {\r\n        color: TEXTCOLOR,\r\n        fontSize: FONTSIZEPrimary\r\n    },\r\n    taskBar: {\r\n        flexDirection: \"row\",\r\n        justifyContent: \"space-around\",\r\n    }\r\n})","import {FC, memo, ReactElement, useCallback} from \"react\";\r\nimport {Text, StyleSheet, View, StatusBar} from \"react-native\";\r\nimport {CustomButton} from \"../common/CustomButton\";\r\nimport {FONTSIZEPrimary, PADDING, TEXTCOLOR, WIDTH} from \"../common/Variables\";\r\nimport React from \"react\";\r\nimport {StyledInput} from \"../styled-components/StyledInput\";\r\nimport {TodoListItem} from \"../DAL/types/types\";\r\n\r\ntype TodoProps = {\r\n    viewMod?: boolean\r\n    todo: TodoListItem\r\n    children?: ReactElement\r\n    addTaskHandler?: () => void\r\n    onChangeTaskTitle?: (value: string) => void\r\n    currentTaskTitle?: string\r\n    deleteTodoHandler?: (todoId: string) => void\r\n}\r\n\r\nexport const Todo: FC<TodoProps> = memo((props) => {\r\n    const {children, addTaskHandler, todo, viewMod, onChangeTaskTitle, currentTaskTitle, deleteTodoHandler} = props\r\n\r\n    const onAddTask = useCallback(() => {\r\n        addTaskHandler && addTaskHandler()\r\n    }, [currentTaskTitle])\r\n\r\n    const onDeleteTodo = useCallback(() => {\r\n        deleteTodoHandler && deleteTodoHandler(todo._id)\r\n    }, [todo._id,deleteTodoHandler])\r\n\r\n    return (\r\n        <View style={styles.container}>\r\n            <View style={[styles.titleContainer]}>\r\n                <Text style={styles.title}>{todo.title}</Text>\r\n                <CustomButton onPress={onDeleteTodo}>delete</CustomButton>\r\n            </View>\r\n            {\r\n                !viewMod &&\r\n                <View style={[styles.inputAndButtonBox]}>\r\n                    <StyledInput\r\n                        style={[styles.input]}\r\n                        onChangeText={onChangeTaskTitle}\r\n                        value={currentTaskTitle}\r\n                        placeholderTextColor={TEXTCOLOR}\r\n                        placeholder={\"task name...\"}\r\n                        caretHidden\r\n                    />\r\n                    <CustomButton onPress={onAddTask}>add task</CustomButton>\r\n                </View>\r\n            }\r\n            {children || null}\r\n        </View>\r\n    )\r\n\r\n})\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        paddingTop: StatusBar.currentHeight || 0,\r\n        flex: 1,\r\n        justifyContent: \"flex-start\",\r\n        paddingHorizontal: PADDING / 3,\r\n        paddingVertical: PADDING / 3,\r\n\r\n    },\r\n    titleContainer: {\r\n        flexDirection: \"row\",\r\n        justifyContent: \"space-between\"\r\n    },\r\n    title: {\r\n        fontSize: FONTSIZEPrimary,\r\n        color: TEXTCOLOR,\r\n        alignSelf: \"center\",\r\n    },\r\n    inputAndButtonBox: {\r\n        flexDirection: \"row\",\r\n        justifyContent: \"space-between\",\r\n        marginVertical: PADDING / 3\r\n    },\r\n    input: {\r\n        width: (WIDTH - PADDING * 2) * 0.6\r\n    }\r\n})","import React, {memo, useCallback} from \"react\";\r\nimport {Text, View, StyleSheet, Pressable} from \"react-native\";\r\nimport {commonBorderStyle} from \"../common/Styles\";\r\nimport {CustomButton} from \"../common/CustomButton\";\r\nimport {BACKGROUNDCOLOR, FONTSIZEPrimary, HEIGHT, MARGIN, PADDING, TEXTCOLOR, WIDTH} from \"../common/Variables\";\r\nimport {useActions, useAppNavigation} from \"../CustomHooks/CustomHooks\";\r\nimport {TaskItem, TodoListItem} from \"../DAL/types/types\";\r\nimport {Api} from \"../DAL/Api\";\r\n\r\ntype TaskProps = {\r\n    task: TaskItem\r\n    todo: TodoListItem\r\n}\r\nexport const Task: React.FC<TaskProps> = memo(({task, todo}) => {\r\n    const [putTask, {isLoading}] = Api.usePutTaskMutation()\r\n    const navigation = useAppNavigation()\r\n    const {changeCurrentTodo, changeCurrentTask} = useActions()\r\n\r\n    const doubleTap = useCallback(() => {\r\n        let tapCount = 0\r\n        return () => {\r\n            tapCount++\r\n            setTimeout(() => {\r\n                tapCount = 0\r\n            }, 300)\r\n            if (tapCount === 2) {\r\n                changeCurrentTodo(todo)\r\n                changeCurrentTask(task)\r\n                navigation.navigate(\"TodoScreen\", {screen: \"TaskScreen\", params: {screen: \"TaskView\"}})\r\n            } else {\r\n            }\r\n        }\r\n    }, [todo, task])\r\n\r\n    const checkTask = useCallback(() => {\r\n        putTask({...task, status: task.status === 0 ? 1 : 0})\r\n    }, [task])\r\n\r\n    return (\r\n        <Pressable onPress={doubleTap()}>\r\n            <View style={[styles.taskContainer, commonBorderStyle(), task.status === 1 && styles.checkedTask]}>\r\n                <Text style={[styles.title]}>{task.title}</Text>\r\n                <CustomButton styleButton={styles.button} disabled={isLoading} onPress={checkTask}>check</CustomButton>\r\n            </View>\r\n        </Pressable>\r\n    )\r\n})\r\n\r\nconst styles = StyleSheet.create({\r\n    taskContainer: {\r\n        flexDirection: \"row\",\r\n        justifyContent: \"space-between\",\r\n        marginVertical: MARGIN / 3,\r\n        paddingVertical: PADDING / 4,\r\n        paddingHorizontal: PADDING / 4,\r\n    },\r\n    checkedTask: {\r\n        backgroundColor: BACKGROUNDCOLOR\r\n    },\r\n    title: {\r\n        color: TEXTCOLOR,\r\n        fontSize: FONTSIZEPrimary,\r\n        maxWidth: ((WIDTH - PADDING * 2) / 1.5)\r\n    },\r\n    button: {\r\n        maxHeight: HEIGHT / 25\r\n    },\r\n})","import React, {memo} from \"react\";\r\nimport {Task} from \"./Task\";\r\nimport {FlatList, ListRenderItem,View} from \"react-native\";\r\nimport {TaskItem, TodoListItem} from \"../DAL/types/types\";\r\n\r\ntype TasksProps = {\r\n    tasks?: TaskItem[]\r\n    todo: TodoListItem\r\n}\r\nexport const Tasks: React.FC<TasksProps> = memo(({tasks, todo}) => {\r\n\r\n    const render: ListRenderItem<TaskItem> = ({item}) => {\r\n        return (\r\n                <Task todo={todo} key={item._id} task={item}/>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <View>\r\n            <FlatList\r\n                data={tasks}\r\n                extraData={tasks}\r\n                keyExtractor={(item) => item._id}\r\n                renderItem={render}\r\n                listKey={todo._id}\r\n            />\r\n        </View>\r\n    )\r\n})\r\n\r\n\r\n","import React, {FC, memo, useCallback, useState} from \"react\";\r\nimport {Api} from \"../DAL/Api\";\r\nimport {Todo} from \"./Todo\";\r\nimport {Tasks} from \"./Tasks\";\r\nimport {TodoListItem} from \"../DAL/types/types\";\r\nimport {ActivityIndicator} from \"react-native\";\r\n\r\ntype TodoContainerProps = {\r\n    todo: TodoListItem\r\n}\r\n\r\nexport const TodoContainer: FC<TodoContainerProps> = memo(({todo}) => {\r\n    const [taskTitle, setTaskTitle] = useState(\"\")\r\n    const {data, isLoading} = Api.useGetTasksQuery({todolistId: todo._id})\r\n    const [deleteTodo] = Api.useDeleteTodoMutation()\r\n    const [postTask] = Api.usePostTaskMutation()\r\n    const tasks = data?.items\r\n\r\n    const onChangeTodoTitle = useCallback((value: string) => {\r\n        setTaskTitle(value)\r\n    }, [taskTitle])\r\n\r\n    const addTaskHandler = useCallback(() => {\r\n        postTask({todolistId: todo._id, title: taskTitle})\r\n        setTaskTitle(\"\")\r\n    }, [todo._id, taskTitle])\r\n\r\n    const deleteTodoHandler = useCallback((todoId: string) => {\r\n        deleteTodo(todoId)\r\n    }, [todo._id])\r\n\r\n    return (\r\n        <Todo\r\n            currentTaskTitle={taskTitle}\r\n            onChangeTaskTitle={onChangeTodoTitle}\r\n            todo={todo}\r\n            addTaskHandler={addTaskHandler}\r\n            deleteTodoHandler={deleteTodoHandler}\r\n        >\r\n            {isLoading ?\r\n                <ActivityIndicator color={\"white\"} size={\"large\"}/>\r\n                :\r\n                <Tasks todo={todo} tasks={tasks}/>}\r\n        </Todo>\r\n    )\r\n})","import React from \"react\";\r\nimport {TodoContainer} from \"./TodoContainer\";\r\nimport {useAppSelector} from \"../CustomHooks/CustomHooks\";\r\n\r\nexport const TaskList = () => {\r\n    const todo = useAppSelector(state => state.navigateParamsState.currentTodo)\r\n    return (\r\n        <TodoContainer todo={todo}/>\r\n    )\r\n}\r\n\r\n","import {TasksScreenStackParamList} from \"../types/types\";\r\nimport {TaskView} from \"../../View/TaskView\";\r\nimport React from \"react\";\r\nimport {TaskList} from \"../../View/TaskList\";\r\nimport {createBottomTabNavigator} from \"@react-navigation/bottom-tabs\";\r\n\r\nconst Tab = createBottomTabNavigator<TasksScreenStackParamList>()\r\n\r\nexport const TaskScreen = () => {\r\n    return (\r\n        <Tab.Navigator\r\n            tabBar={() => <></>}\r\n            sceneContainerStyle={{backgroundColor: \"rgba(5,5,5,0)\"}}\r\n            screenOptions={{headerShown: false,}}\r\n        >\r\n            <Tab.Screen name={\"TaskList\"} component={TaskList}/>\r\n            <Tab.Screen name={\"TaskView\"} component={TaskView}/>\r\n        </Tab.Navigator>\r\n    )\r\n}","import {StyleSheet, View, StatusBar} from \"react-native\";\r\nimport {BACKGROUNDCOLOR, HEIGHT, PADDING, TEXTCOLOR, WIDTH} from \"../common/Variables\";\r\nimport {FC, memo, useCallback, useEffect, useState} from \"react\";\r\nimport {CustomButton} from \"../common/CustomButton\";\r\nimport {commonStyles} from \"../common/Styles\";\r\nimport {StyledInput} from \"../styled-components/StyledInput\";\r\nimport React from \"react\";\r\nimport {Api} from \"../DAL/Api\";\r\nimport {useAppNavigation} from \"../CustomHooks/CustomHooks\";\r\n\r\ntype HeaderProps = {\r\n    createTodoHandler: (newTodoTitle: string) => void\r\n}\r\n\r\nexport const Header: FC<HeaderProps> = memo(({createTodoHandler}) => {\r\n    const [inputValue, setInputValue] = useState(\"\")\r\n    const navigation = useAppNavigation()\r\n    const {data} = Api.useAuthMeQuery()\r\n\r\n    const onTextInput = useCallback((value: string) => {\r\n        setInputValue(value)\r\n    }, [inputValue])\r\n\r\n    const onCreateTodo = useCallback(() => {\r\n        createTodoHandler(inputValue)\r\n        setInputValue(\"\")\r\n    }, [inputValue])\r\n\r\n    useEffect(() => {\r\n        if (data && data.resultCode === 1) {\r\n            navigation.navigate(\"Login\")\r\n        }\r\n    }, [data])\r\n\r\n    return (\r\n        <View style={styles.container}>\r\n            <StyledInput\r\n                style={[commonStyles.modalInputStyle]}\r\n                onChangeText={onTextInput}\r\n                value={inputValue}\r\n                placeholderTextColor={TEXTCOLOR}\r\n                placeholder={\"Todo...\"}\r\n            />\r\n            <CustomButton styleButton={styles.button} onPress={onCreateTodo}>\r\n                Create todo\r\n            </CustomButton>\r\n        </View>\r\n    )\r\n})\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        paddingTop: StatusBar.currentHeight || 0,\r\n        width: WIDTH,\r\n        height: HEIGHT / 9,\r\n        paddingHorizontal: 15,\r\n        paddingVertical: 5,\r\n        backgroundColor: BACKGROUNDCOLOR,\r\n        flexDirection: \"row\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"space-between\",\r\n    },\r\n    button: {\r\n        height: (HEIGHT - PADDING * 2) / 19,\r\n        width: (WIDTH - PADDING * 2) / 2,\r\n    },\r\n    modalInputStyle: {\r\n        height: (HEIGHT - PADDING * 2) / 19,\r\n        width: (WIDTH - PADDING * 2) / 2,\r\n    }\r\n})","import {Text, View, StyleSheet} from \"react-native\";\r\nimport {FONTSIZEPrimary, HEIGHT, TEXTCOLOR, WIDTH} from \"../common/Variables\";\r\nimport React from \"react\";\r\n\r\nexport const EmptyContent = () => {\r\n    return (\r\n        <View style={styles.container}>\r\n            <Text style={styles.title}>\r\n                O curva! list is empty!\r\n            </Text>\r\n        </View>\r\n    )\r\n}\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        width: WIDTH,\r\n        height: HEIGHT * 0.79,\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n    },\r\n    title: {\r\n        color: TEXTCOLOR,\r\n        fontSize: FONTSIZEPrimary,\r\n    }\r\n})","import {FC, memo, ReactElement} from \"react\";\r\nimport {StyleSheet, View} from \"react-native\";\r\nimport {commonBorderStyle} from \"../common/Styles\";\r\nimport {HEIGHT, MARGIN, PADDING, WIDTH} from \"../common/Variables\";\r\nimport React from \"react\";\r\n\r\ntype TodoContainerProps = {\r\n    children?: ReactElement\r\n}\r\n\r\nexport const ViewModContainer: FC<TodoContainerProps> = memo(({children}) => {\r\n\r\n    return (\r\n        <View style={[styles.todoContainer, commonBorderStyle(0)]}>\r\n            {children}\r\n        </View>\r\n    )\r\n})\r\n\r\nexport const styles = StyleSheet.create({\r\n    todoContainer: {\r\n        width: WIDTH,\r\n        minHeight: ((HEIGHT - PADDING * 2) / 4),\r\n        marginVertical: MARGIN / 2,\r\n        alignSelf: \"center\"\r\n    },\r\n})\r\n","import {useActions, useAppNavigation} from \"../CustomHooks/CustomHooks\";\r\nimport {ActivityIndicator, FlatList, ListRenderItem, TouchableOpacity,} from 'react-native';\r\nimport {Header} from \"./Header\";\r\nimport {EmptyContent} from \"./EmptyContent\";\r\nimport {ViewModContainer} from \"./ViewModContainer\";\r\nimport React, {useCallback} from \"react\";\r\nimport {Api} from \"../DAL/Api\";\r\nimport {TodoListItem} from \"../DAL/types/types\";\r\nimport {TaskList} from \"./TaskList\";\r\nimport {TodoContainer} from \"./TodoContainer\";\r\n\r\nexport const TodoList = () => {\r\n    const {data: todoList, isLoading} = Api.useGetTodoListQuery()\r\n    const [createTodo] = Api.usePostTodoMutation()\r\n    const navigation = useAppNavigation()\r\n    const {changeCurrentTodo} = useActions()\r\n\r\n    const createTodoHandler = useCallback((newTodoTitle: string) => {\r\n        createTodo(newTodoTitle)\r\n    }, [])\r\n\r\n    const render: ListRenderItem<TodoListItem> = useCallback(({item}) => {\r\n        const onNavigate = () => {\r\n            changeCurrentTodo(item)\r\n            navigation.navigate(\"TodoScreen\", {screen: \"TaskScreen\", params: {screen: \"TaskList\"}})\r\n        }\r\n\r\n        return (\r\n            <TouchableOpacity activeOpacity={1} onLongPress={onNavigate}>\r\n                <ViewModContainer>\r\n                    <TodoContainer todo={item}/>\r\n                </ViewModContainer>\r\n            </TouchableOpacity>\r\n        )\r\n    }, [todoList])\r\n\r\n    if (isLoading) {\r\n        return <ActivityIndicator/>\r\n    }\r\n\r\n    return (\r\n        <FlatList\r\n            data={todoList}\r\n            keyExtractor={(item) => item._id}\r\n            renderItem={render}\r\n            ListHeaderComponent={<Header createTodoHandler={createTodoHandler}/>}\r\n            ListEmptyComponent={<EmptyContent/>}\r\n            listKey={\"root\"}\r\n        />\r\n    );\r\n}\r\n","import {TodoScreenStackParamList} from \"../types/types\";\r\nimport {TaskScreen} from \"../TaskScreen/TaskScreen\";\r\nimport {TodoList} from \"../../View/TodoList\";\r\nimport React from \"react\";\r\nimport {createBottomTabNavigator} from \"@react-navigation/bottom-tabs\";\r\n\r\nconst Tab = createBottomTabNavigator<TodoScreenStackParamList>()\r\n\r\nexport const TodoScreen = () => {\r\n    return (\r\n        <Tab.Navigator\r\n            tabBar={() => <></>}\r\n            sceneContainerStyle={{backgroundColor: \"rgba(5,5,5,0)\"}}\r\n            screenOptions={{headerShown: false,}}>\r\n            <Tab.Screen name={\"TodoList\"} component={TodoList}/>\r\n            <Tab.Screen name={\"TaskScreen\"} component={TaskScreen}/>\r\n        </Tab.Navigator>\r\n    )\r\n}","import React from \"react\";\r\nimport {Login} from \"../../View/Login\";\r\nimport {RootScreenStackParamList} from \"../types/types\";\r\nimport {TodoScreen} from \"../Todo-Screen/TodoScreen\";\r\nimport {createBottomTabNavigator} from \"@react-navigation/bottom-tabs\";\r\n\r\nconst Tab = createBottomTabNavigator<RootScreenStackParamList>()\r\n\r\nexport const RootScreen = () => {\r\n    return (\r\n        <Tab.Navigator\r\n            tabBar={() => <></>}\r\n            sceneContainerStyle={{backgroundColor: \"rgba(5,5,5,1)\"}}\r\n            screenOptions={{headerShown: false,}}>\r\n            <Tab.Screen name={\"Login\"} component={Login}/>\r\n            <Tab.Screen name={\"TodoScreen\"} component={TodoScreen}/>\r\n        </Tab.Navigator>\r\n    )\r\n}\r\n","import {Provider} from 'react-redux'\r\nimport {store} from \"./src/BLL/Store\";\r\nimport React from \"react\";\r\nimport {NavigationContainer} from '@react-navigation/native';\r\nimport {RootScreen} from \"./src/screens/Root-screen/RootScreen\";\r\nimport {StatusBar} from \"expo-status-bar\";\r\n\r\nexport default function App() {\r\n    return (\r\n        <NavigationContainer>\r\n            <StatusBar style={\"auto\"}/>\r\n            <Provider store={store}>\r\n                <RootScreen/>\r\n            </Provider>\r\n        </NavigationContainer>\r\n    );\r\n}\r\n\r\n\r\n"],"sourceRoot":""}